{
  "_args": [
    [
      {
        "raw": "redux-saga-router",
        "scope": null,
        "escapedName": "redux-saga-router",
        "name": "redux-saga-router",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/newspring/newspring/northfacebook_frontend"
    ]
  ],
  "_from": "redux-saga-router@latest",
  "_id": "redux-saga-router@2.1.0",
  "_inCache": true,
  "_location": "/redux-saga-router",
  "_nodeVersion": "7.9.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/redux-saga-router-2.1.0.tgz_1493846155649_0.9854117350187153"
  },
  "_npmUser": {
    "name": "elpapapollo",
    "email": "elpapapollo@gmail.com"
  },
  "_npmVersion": "4.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "redux-saga-router",
    "scope": null,
    "escapedName": "redux-saga-router",
    "name": "redux-saga-router",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/redux-saga-router/-/redux-saga-router-2.1.0.tgz",
  "_shasum": "d049962ad6a44d227f0308aedb75e39c13f58413",
  "_shrinkwrap": null,
  "_spec": "redux-saga-router",
  "_where": "/home/newspring/newspring/northfacebook_frontend",
  "author": {
    "name": "Jeremy Fairbank",
    "email": "elpapapollo@gmail.com",
    "url": "http://jeremyfairbank.com"
  },
  "bugs": {
    "url": "https://github.com/jfairbank/redux-saga-router/issues"
  },
  "dependencies": {
    "fsm-iterator": "^1.0.0",
    "history": "^4.3.0",
    "ruta3": "^2.0.1"
  },
  "description": "A router for Redux Saga",
  "devDependencies": {
    "babel-cli": "^6.16.0",
    "babel-core": "^6.16.0",
    "babel-eslint": "^7.0.0",
    "babel-jest": "^19.0.0",
    "babel-loader": "^6.2.5",
    "babel-plugin-transform-async-to-generator": "^6.16.0",
    "babel-plugin-transform-class-properties": "^6.16.0",
    "babel-plugin-transform-export-extensions": "^6.8.0",
    "babel-plugin-transform-object-rest-spread": "^6.16.0",
    "babel-polyfill": "^6.16.0",
    "babel-preset-es2015": "^6.18.0",
    "babel-preset-react": "^6.16.0",
    "babel-runtime": "^6.20.0",
    "eslint": "^3.6.1",
    "eslint-config-airbnb": "^12.0.0",
    "eslint-config-airbnb-base": "^8.0.0",
    "eslint-import-resolver-node": "^0.2.3",
    "eslint-plugin-import": "^1.16.0",
    "eslint-plugin-jsx-a11y": "^2.2.2",
    "eslint-plugin-react": "^6.3.0",
    "express": "^4.14.0",
    "jest": "^19.0.2",
    "react": "^15.3.2",
    "react-dom": "^15.3.2",
    "react-redux": "^4.4.5",
    "react-router": "^2.8.1",
    "redux": "^3.6.0",
    "redux-saga": "^0.14.2",
    "redux-saga-test-plan": "^2.4.4",
    "rimraf": "^2.5.4",
    "webpack": "^1.13.2",
    "webpack-dev-server": "^1.16.1"
  },
  "directories": {},
  "dist": {
    "shasum": "d049962ad6a44d227f0308aedb75e39c13f58413",
    "tarball": "https://registry.npmjs.org/redux-saga-router/-/redux-saga-router-2.1.0.tgz"
  },
  "files": [
    "react.js",
    "lib",
    "src"
  ],
  "gitHead": "7995a01cccf382c036e3e3d4701cfb8821af9c10",
  "homepage": "https://github.com/jfairbank/redux-saga-router#readme",
  "keywords": [
    "redux",
    "redux-saga",
    "saga",
    "router",
    "routing",
    "history"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "elpapapollo",
      "email": "elpapapollo@gmail.com"
    }
  ],
  "name": "redux-saga-router",
  "optionalDependencies": {},
  "peerDependencies": {
    "redux-saga": ">=0.10.0 <0.16.0"
  },
  "readme": "# Redux Saga Router\n\n[![Travis branch](https://img.shields.io/travis/jfairbank/redux-saga-router/master.svg?style=flat-square)](https://travis-ci.org/jfairbank/redux-saga-router)\n[![npm](https://img.shields.io/npm/v/redux-saga-router.svg?style=flat-square)](https://www.npmjs.com/package/redux-saga-router)\n\n#### A router for Redux Saga\n\nRedux Saga Router gives you a saga for handling clientside routes in your Redux\nSaga application. This affords you a perfect way to manage side effects or\ndispatch Redux actions in response to route changes.\n\n## Table of Contents\n\n- [Install](#install)\n- [Usage](#usage)\n- [Behavior](#behavior)\n- [Parameters](#parameters)\n- [Route Matching](#route-matching)\n- [Options](#options)\n- [Navigation](#navigation)\n  - [Hash History](#hash-history)\n  - [Browser History](#browser-history)\n  - [Browser History with React](#browser-history-with-react)\n  - [React Router v2/v3](#react-router)\n\n## Install\n\nYarn or npm.\n\n```sh\nyarn add redux-saga-router\n```\n\n```sh\nnpm install --save redux-saga-router\n```\n\n## Usage\n\nRedux Saga Router comes equipped with a `router` saga and two history\nstrategies, `createBrowserHistory` and `createHashHistory`.\n\nThe `router` saga expects a history object and a routes object with key-value\npairs of route paths to other sagas. It also takes an optional third argument with\n[additional options](#options).\n\nTo create a history object, you can use `createBrowserHistory` or\n`createHashHistory`. `createBrowserHistory` uses HTML5 `pushState` while\n`createHashHistory` uses (you guessed it) hashes, which is perfect for older\nbrowsers. These two history creation functions in fact come from the\n[history](https://github.com/mjackson/history) library.\n\n```js\nimport { call, fork, put } from 'redux-saga';\nimport { router, createBrowserHistory } from 'redux-saga-router';\n\nconst history = createBrowserHistory();\n\nconst routes = {\n  '/users': function* usersSaga() {\n    const users = yield call(fetchUsers);\n    yield put(setUsers(users));\n  },\n\n  '/users/:id': function* userSaga({ id }) {\n    const user = yield call(fetchUser, id);\n    yield put(setCurrentUser(user));\n  },\n};\n\nfunction* mainSaga() {\n  const data = yield call(fetchInitialData);\n\n  yield put(ready(data));\n\n  // The recommended way is to `fork` the router, but you can delegate with\n  // yield* too\n  yield fork(router, history, routes);\n}\n```\n\n## Behavior\n\nRedux Saga Router will `spawn` the **first** matching route saga. When the location\nchanges, the current running saga will be cancelled. As such, you might want to\n[clean up](https://redux-saga.js.org/docs/advanced/TaskCancellation.html)\nyour saga in that event.\n\nIf you wish to avoid your saga's being cancelled, you can `spawn` a sub saga in\nyour route saga like the following:\n\n```js\nconst routes = {\n  '/': function* homeSaga() {\n    yield spawn(subSaga);\n  },\n};\n```\n\nIn the event of an unhandled error occurring in one of your sagas, the error\nwill stop the running saga and will not propagate to the router. That means that\nyour application will continue to function when you hit other routes. That also\nmeans you should ensure you handle any potential errors that could occur in your\nroute sagas.\n\n## Parameters\n\nYou can capture dynamic path parameters by prepending them with the `:` symbol.\nThe name you use will be assigned to a property of the same name on a parameters\nobject that is passed into your route saga.\n\n```js\nconst routes = {\n  // Capture the user id with `:id` into an `id` property of the parameters\n  // object that is passed into `userSaga`.\n  '/users/:id': function* userSaga({ id }) {\n    const user = yield call(fetchUser, id);\n    yield put(setCurrentUser(user));\n  },\n\n  // You can capture multiple dynamic path parameters too.\n  '/dogs/:id/friends/:friendId': function* dogSaga({ id, friendId }) {\n    // ...\n  },\n};\n```\n\n## Route Matching\n\nHere are some examples of how route matching works.\n\n### Exact Matching\n\nThis route will only match `/foo` exactly.\n\n```js\nconst routes = {\n  '/foo': saga,\n};\n```\n\n### Path Parameters\n\nIf you specify a dynamic path parameter, then it will be required. This route\nwill match `/bar/42` but NOT `/bar`.\n\n```js\nconst routes = {\n  '/bar/:id': saga,\n};\n```\n\n### Optional Named Parameters\n\nHowever, you can make a path parameter optional, by ending it with `?`.\n\nThis route will match `/bar/42` AND `/bar`.\n\n```js\nconst routes = {\n  '/bar/:id?': saga,\n};\n```\n\nUsing a `period` before an optional parameter can be optional too.\n\nThis route will match `/bar/LICENSE` and `/bar/README.md`.\n\n```js\nconst routes = {\n  '/bar/:fname.:ext?': saga,\n};\n```\n\n### Wildcard\n\nYou can use `*` as a wildcard to match many routes.\n\nThis route would match `/bar` and `/bar/baz/foo`.\n\n```js\nconst routes = {\n  '/bar/*': saga,\n};\n```\n\n## Options\n\nAs mentioned earlier, the `router` saga may also take a third argument, an\noptional `options` object, which allows you to specify additional behaviour as\ndescribed below:\n\nKey                 | Description\n--------------------|--------------------------------------------------------\n`matchAll`          | If set to `true`, it allows all matching routes to run instead of the first matching route.\n`beforeRouteChange` | Set to a saga to run any time location changes. This is useful for dispatching a cleanup action before route changes.\n\n\n```js\nconst options = {\n  matchAll: true,\n\n  *beforeRouteChange() {\n    yield put(clearNotifications());\n  },\n};\n\nfunction* mainSaga() {\n  yield fork(router, history, routes, options);\n}\n```\n\n## Navigation\n\n### Hash History\nIf you use hash history, then navigation will work right out of the box.\n\n```js\nimport { router, createHashHistory } from 'redux-saga-router';\n\nconst history = createHashHistory();\n\nconst routes = {\n  // ...\n};\n\nfunction* mainSaga() {\n  const data = yield call(fetchInitialData);\n\n  yield put(ready(data));\n\n  yield fork(router, history, routes);\n}\n```\n\n```html\n<nav>\n  <ul>\n    <li><a href=\"#/users\">Users</a></li>\n    <li><a href=\"#/users/1\">A Specific User</a></li>\n  </ul>\n</nav>\n```\n\n### Browser History\n\nBrowser history depends on `pushState` changes, so you'll need a method for\nmaking anchor tags change history state instead of actually exhibiting their\ndefault behavior. Also, if you're building a single-page application, your\nserver will need to support your client side routes to ensure your app loads\nproperly.\n\n```js\nimport { router, createBrowserHistory } from 'redux-saga-router';\n\nconst history = createBrowserHistory();\n\n// This is a naive example, so you might want something more robust\ndocument.addEventListener('click', (e) => {\n  const el = e.target;\n\n  if (el.tagName === 'A') {\n    e.preventDefault();\n    history.push(el.pathname);\n  }\n});\n\nconst routes = {\n  // ...\n};\n\nfunction* mainSaga() {\n  // ...\n}\n```\n\n### Browser History with React\n\nIf you're using React in your application, then Redux Saga Router does export a\nhigher-order component (HOC) that allows you to abstract away dealing with\n`pushState` manually. You can import the `createLink` HOC from\n`redux-saga-router/react` to create a `Link` component similar to what's\navailable in React Router. Just pass in your `history` object to the\n`createLink` function to create the `Link` component. You'll probably want a\nseparate file in your application for exporting your `history` object and your\n`Link` component.\n\n```js\n// history.js\n\nimport { createBrowserHistory } from 'redux-saga-router';\nimport { createLink } from 'redux-saga-router/react'\n\nconst history = createBrowserHistory();\n\nexport const Link = createLink(history);\nexport { history };\n```\n\n```js\n// saga.js\n\nimport { router } from 'redux-saga-router';\nimport { history } from './history';\n\nconst routes = {\n  // ...\n};\n\nfunction* mainSaga() {\n  const data = yield call(fetchInitialData);\n\n  yield put(ready(data));\n\n  yield fork(router, history, routes);\n}\n```\n\n```jsx\n// App.js\n\nimport React from 'react';\nimport { Link } from './history';\n\nexport default function App() {\n  return (\n    <nav>\n      <ul>\n        <li><Link to=\"/users\">Users</Link></li>\n        <li><Link to=\"/users/1\">A Specific User</Link></li>\n      </ul>\n    </nav>\n  );\n}\n```\n\n### React Router\n\nRedux Saga Router can also work in tandem with React Router v2 or v3! Instead of\nusing one of Redux Saga Router's history creation functions, just use your\nhistory object from React Router.\n\n```js\n// saga.js\n\nimport { router } from 'redux-saga-router';\nimport { browserHistory as history } from 'react-router';\n\nconst routes = {\n  // ...\n};\n\nexport default function* mainSaga() {\n  const data = yield call(fetchInitialData);\n\n  yield put(ready(data));\n\n  yield fork(router, history, routes);\n}\n```\n\n```jsx\n// App.js\n\nimport React from 'react';\nimport { Link } from 'react-router';\n\nexport default function App({ children }) {\n  return (\n    <div>\n      <nav>\n        <ul>\n          <li><Link to=\"/users\">Users</Link></li>\n          <li><Link to=\"/users/1\">A Specific User</Link></li>\n        </ul>\n      </nav>\n\n      <div>\n        {children}\n      </div>\n    </div>\n  );\n}\n```\n\n```jsx\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { applyMiddleware, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { Router, Route, browserHistory as history } from 'react-router';\nimport App from './App';\nimport Users from './Users';\nimport User from './User';\nimport mainSaga from './saga';\n\nfunction reducer() {\n  return {};\n}\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(reducer, applyMiddleware(sagaMiddleware));\n\nsagaMiddleware.run(mainSaga);\n\nrender((\n  <Router history={history}>\n    <Route path=\"/\" component={App}>\n      <Route path=\"/users\" component={Users} />\n      <Route path=\"/users/:id\" component={User} />\n    </Route>\n  </Router>\n), document.getElementById('main'));\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jfairbank/redux-saga-router.git"
  },
  "scripts": {
    "build": "babel src --out-dir lib",
    "check": "npm run lint && npm test",
    "clean": "rimraf lib",
    "lint": "eslint src __tests__",
    "prepublish": "npm run clean && npm run build",
    "test": "jest",
    "watch:test": "jest --watch"
  },
  "version": "2.1.0"
}
