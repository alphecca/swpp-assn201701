'use strict';

exports.__esModule = true;
exports.default = createLink;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable import/no-extraneous-dependencies */


function createLink(history) {
  var Link = function (_Component) {
    _inherits(Link, _Component);

    function Link() {
      var _temp, _this, _ret;

      _classCallCheck(this, Link);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.onClick = function (e) {
        e.preventDefault();
        history.push(_this.props.to);
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    Link.prototype.render = function render() {
      var _props = this.props,
          to = _props.to,
          className = _props.className,
          children = _props.children;


      return _react2.default.createElement(
        'a',
        { href: to, className: className, onClick: this.onClick },
        children
      );
    };

    return Link;
  }(_react.Component);

  Link.propTypes = {
    to: _react.PropTypes.string.isRequired,
    className: _react.PropTypes.string,
    children: _react.PropTypes.any
  };


  return Link;
}