'use strict';

exports.__esModule = true;
exports.default = router;

var _effects = require('redux-saga/effects');

var _buildRouteMatcher = require('./buildRouteMatcher');

var _buildRouteMatcher2 = _interopRequireDefault(_buildRouteMatcher);

var _createHistoryChannel = require('./createHistoryChannel');

var _createHistoryChannel2 = _interopRequireDefault(_createHistoryChannel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var STATE = {
  INIT: 0,
  LISTEN: 1,
  HANDLE_LOCATION: 2,
  DONE: 3
}; /* eslint no-console: ["error", { allow: ["error"] }] */
function router(history, routes) {
  var routeMatcher = (0, _buildRouteMatcher2.default)(routes);

  var state = STATE.INIT;
  var previousState = null;
  var lastMatch = null;
  var historyChannel = null;

  function updateState(newState) {
    previousState = state;
    state = newState;
  }

  function getChannelValue() {
    var value = (0, _effects.call)(_createHistoryChannel2.default, history);

    updateState(STATE.LISTEN);

    return { value: value, done: false };
  }

  function listenValue(channel) {
    if (channel) {
      historyChannel = channel;
    }

    var value = (0, _effects.take)(historyChannel);

    updateState(STATE.HANDLE_LOCATION);

    return { value: value, done: false };
  }

  function handleLocationValue(location) {
    var path = location.pathname;
    var match = routeMatcher.match(path);

    if (match) {
      var value = (0, _effects.call)(match.action, match.params);

      updateState(STATE.LISTEN);
      lastMatch = match;

      return { value: value, done: false };
    }

    return listenValue();
  }

  function errorMessageValue(error, message) {
    var finalMessage = 'Redux Saga Router: ' + message + ':\n' + error.message;

    if ('stack' in error) {
      finalMessage += '\n' + error.stack;
    }

    var value = (0, _effects.call)([console, console.error], finalMessage);

    updateState(STATE.LISTEN);

    return { value: value, done: false };
  }

  function doneValue(value) {
    return {
      value: value,
      done: true
    };
  }

  var iterator = {
    name: '',

    next: function next(value) {
      switch (state) {
        case STATE.INIT:
          return getChannelValue();

        case STATE.LISTEN:
          return listenValue(value);

        case STATE.HANDLE_LOCATION:
          return handleLocationValue(value);

        default:
          return doneValue();
      }
    },
    throw: function _throw(e) {
      switch (previousState) {
        case STATE.HANDLE_LOCATION:
          return errorMessageValue(e, 'Unhandled ' + e.name + ' in route "' + lastMatch.route + '"');

        case STATE.LISTEN:
          return errorMessageValue(e, 'Unexpected ' + e.name + ' while listening for route');

        default:
          return doneValue();
      }
    },
    return: function _return(value) {
      updateState(STATE.DONE);
      return doneValue(value);
    }
  };

  if (typeof Symbol === 'function' && Symbol.iterator) {
    iterator[Symbol.iterator] = function () {
      return iterator;
    };
  }

  return iterator;
}